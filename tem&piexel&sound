#include <Wire.h>
#include <Adafruit_AMG88xx.h>// notes in the melody:
#define BDPIN_BUZZER 31
#include "pitches.h"

int melody[] = {
      NOTE_C6, NOTE_C6, NOTE_C6, NOTE_C6, NOTE_C6, NOTE_C6, NOTE_C6, NOTE_C6
    };

// note durations: 4 = quarter note, 8 = eighth note, etc.:
    int noteDurations[] = {
      4, 4, 4, 4, 4, 4, 4, 4
    };



char chars[] = { '.', '-', '-', '+', '*', 'i', 'j', '1', 'x', 'u', 's', '4', 'a', '3', 'd', 'P', '9', 'N', 'S', 'G', 'W', '@'};
Adafruit_AMG88xx amg;

float pixels[AMG88xx_PIXEL_ARRAY_SIZE];

void setup() {
  Serial.begin(115200);
  Serial.println(F("AMG88xx pixels & test"));

  bool status;

  // default settings
  status = amg.begin();
  if (!status) {
    Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
    while (1);
  }

  Serial.println("-- Pixels & Temperature Test --");

  Serial.println();

  delay(100); // let sensor boot up


  
}


void loop() {
  //read all the pixels
  amg.readPixels(pixels);
  int temp;
  int Tmin = 1000, Tmax = 0;
  for (int i = 1; i <= AMG88xx_PIXEL_ARRAY_SIZE; i++) {
    temp = pixels[i - 1] * 10;
    Tmin = Tmin > temp ? temp : Tmin;
    Tmax = Tmax < temp ? temp : Tmax;
  }
  Serial.print("[");
  for (int i = AMG88xx_PIXEL_ARRAY_SIZE; i >= 1; i--) {
    int temp = (pixels[i - 1] * 10);
    int idx = map(temp, Tmin, Tmax, 0, 21);
    
    if ( i % 8 == 0 ) Serial.println();
    Serial.print(chars[idx]);
    Serial.print(", ");
  }
  Serial.println("]");
  Serial.println();
  
  Serial.print("Thermistor Temperature = ");
  Serial.print(amg.readThermistor()+4);
  Serial.println(" *C");
  
    Serial.println();

  //delay a second
  delay(2000);

  if ((amg.readThermistor()+4)<34) {
    // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < 8; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(BDPIN_BUZZER, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(BDPIN_BUZZER);
  }
    
  }
}
